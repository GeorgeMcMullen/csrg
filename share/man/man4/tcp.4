.\" Copyright (c) 1983 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)tcp.4	6.4 (Berkeley) 06/23/90
.\"
.TH TCP 4 ""
.UC 5
.SH NAME
tcp \- Internet Transmission Control Protocol
.SH SYNOPSIS
.B #include <sys/socket.h>
.br
.B #include <netinet/in.h>
.PP
.B s = socket(AF_INET, SOCK_STREAM, 0);
.SH DESCRIPTION
The TCP protocol provides reliable, flow-controlled, two-way
transmission of data.  It is a byte-stream protocol used to
support the SOCK_STREAM abstraction.  TCP uses the standard
Internet address format and, in addition, provides a per-host
collection of \*(lqport addresses\*(rq.  Thus, each address is composed
of an Internet address specifying the host and network, with
a specific TCP port on the host identifying the peer entity.
.PP
Sockets utilizing the tcp protocol are either \*(lqactive\*(rq or
\*(lqpassive\*(rq.  Active sockets initiate connections to passive
sockets.  By default TCP sockets are created active; to create a
passive socket the
.IR listen (2)
system call must be used
after binding the socket with the
.IR bind (2)
system call.  Only
passive sockets may use the 
.IR accept (2)
call to accept incoming connections.  Only active sockets may
use the
.IR connect (2)
call to initiate connections.
.PP
Passive sockets may \*(lqunderspecify\*(rq their location to match
incoming connection requests from multiple networks.  This
technique, termed \*(lqwildcard addressing\*(rq, allows a single
server to provide service to clients on multiple networks.
To create a socket which listens on all networks, the Internet
address INADDR_ANY
must be bound.  The TCP port may still be specified
at this time; if the port is not specified the system will assign one.
Once a connection has been established the socket's address is
fixed by the peer entity's location.   The address assigned the
socket is the address associated with the network interface
through which packets are being transmitted and received.  Normally
this address corresponds to the peer entity's network.
.PP
TCP supports one socket option which is set with
.IR setsockopt (2)
and tested with
.IR getsockopt (2).
Under most circumstances, TCP sends data when it is presented;
when outstanding data has not yet been acknowledged, it gathers
small amounts of output to be sent in a single packet once
an acknowledgement is received.
For a small number of clients, such as window systems
that send a stream of mouse events which receive no replies,
this packetization may cause significant delays.
Therefore, TCP provides a boolean option, TCP_NODELAY (from
.IR <netinet/tcp.h> ,
to defeat this algorithm.
The option level for the
.I setsockopt
call is the protocol number for TCP,
available from
.IR getprotobyname (3).
.PP
Options at the IP transport level may be used with TCP; see
.IR ip (4).
Incoming connection requests that are source-routed are noted,
and the reverse source route is used in responding.
.SH DIAGNOSTICS
A socket operation may fail with one of the following errors returned:
.TP 20
[EISCONN]
when trying to establish a connection on a socket which
already has one;
.TP 20
[ENOBUFS]
when the system runs out of memory for
an internal data structure;
.TP 20
[ETIMEDOUT]
when a connection was dropped
due to excessive retransmissions;
.TP 20
[ECONNRESET]
when the remote peer
forces the connection to be closed;
.TP 20
[ECONNREFUSED]
when the remote
peer actively refuses connection establishment (usually because
no process is listening to the port);
.TP 20
[EADDRINUSE]
when an attempt
is made to create a socket with a port which has already been
allocated;
.TP 20
[EADDRNOTAVAIL]
when an attempt is made to create a 
socket with a network address for which no network interface
exists.
.SH SEE ALSO
getsockopt(2), socket(2), intro(4), inet(4), ip(4)
