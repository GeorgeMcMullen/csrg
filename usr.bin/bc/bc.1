.\" Copyright (c) 1990 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)bc.1	6.4 (Berkeley) 06/23/90
.\"
.Dd 
.Dt BC 1
.Os ATT 7th
.Sh NAME
.Nm bc
.Nd arbitrary-precision arithmetic language and calculator
.Sh SYNOPSIS
.Nm bc
.Op Fl c
.Op Fl l
.Ar
.Sh DESCRIPTION
.Nm Bc
is an interactive processor for a language which resembles
C but provides unlimited precision arithmetic.
It takes input from any files given, then reads
the standard input.
The
.Tp Fl l
argument stands for the name
of an arbitrary precision math library.
.Tp Fl c
.Nm Bc
is actually a preprocessor for
.Ar dc 1 ,
which it invokes automatically, unless the
.Fl c
compile only.
option is present.
In this case the
.Ar dc
input is sent to the standard output instead.
.Tp 
.Pp
The syntax for
.Nm bc
programs is as follows;
L means letter a-z,
E means expression, S means statement.
.Pp
Comments
.Dl are enclosed in /* and */.
.Pp
Names
.Dl simple variables: L
.Df I
array elements: L
.Op  E
.De
.Df I
The words `ibase', `obase', and `scale'
.De
.Pp
Other operands
.Dl arbitrarily long numbers with optional sign and decimal point.
.Dl \&( E \&)
.Dl sqrt ( E )
.Dl length ( E )	number of significant decimal digits
.Dl scale ( E )	number of digits right of decimal point
.Dl L ( E , ... , E )
.Pp
Operators
.Dl \&+  \-  *  /  %  ^ (% is remainder; ^ is power)
.Dl \&++   \-\-         (prefix and postfix; apply to names)
.Dl \&==  <=  >=  !=  <  >
.Dl \&=  +=  \-=  *=  /=  %=  ^=
.Pp
Statements
.Ds I
E
{ S ; ... ; S }
if ( E ) S
while ( E ) S
for ( E ; E ; E ) S
null statement
break
quit
.De
.Pp
Function definitions
.Ds I
define L ( L ,..., L ) {
	auto L, ... , L
	S; ... S
	return ( E )
}
.De
.Pp
Functions in
.Fl l
math library
.Dw ss(x)
.Dp s(x)
sine
.Dp c(x)
cosine
.Dp e(x)
exponential
.Dp l(x)
log
.Dp a(x)
arctangent
.Dp j(n,x)
Bessel function
.Dp
.Pp
All function arguments are passed by value.
.Pp
The value of a statement that is an expression is printed
unless the main operator is an assignment.
Either semicolons or newlines may separate statements.
Assignment to
.Ar scale
influences the number of digits to be retained on arithmetic
operations in the manner of
.Xr dc 1 .
Assignments to
.Ar ibase
or
.Ar obase
set the input and output number radix respectively.
.Pp
The same letter may be used as an array, a function,
and a simple variable simultaneously.
All variables are global to the program.
`Auto' variables are pushed down during function calls.
When using arrays as function arguments
or defining them as automatic variables
empty square brackets must follow the array name.
.Pp
For example
.Pp
.Ds I
scale = 20
define e(x){
	auto a, b, c, i, s
	a = 1
	b = 1
	s = 1
	for(i=1; 1==1; i++){
		a = a*x
		b = b*i
		c = a/b
		if(c == 0) return(s)
		s = s+c
	}
}
.De
.Pp
.fi
defines a function to compute an approximate value of
the exponential function and
.Pp
.Dl for(i=1; i<=10; i++) e(i)
.Pp
prints approximate values of the exponential function of
the first ten integers.
.Sh FILES
.\" /usr/share/misc/bc.library	mathematical library
.Ds L
.Dw Dc(1)
.Dp Pa dc(1)	desk calculator proper
.Sh SEE ALSO
.Xr dc 1
.L. .L. .Cherry and R. Morris,
.Em BC \- An arbitrary precision desk-calculator language
.Sh HISTORY
The
.Nm bc
command appeared in Version 7 AT&T UNIX.
.Sh BUGS
No &&, \(or\\(or, or ! operators.
.br
.Li For
statement must have all three E's.
.br
.Li Quit
is interpreted when read, not when executed.
