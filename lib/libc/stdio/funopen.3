.\" Copyright (c) 1990 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)funopen.3	5.1 (Berkeley) 03/05/91
.\"
.TH FUNOPEN 3 ""
.UC 7
.SH NAME
funopen, fropen, fwopen \- open a stream
.SH SYNOPSIS
.nf
.ft B
#include <stdio.h>

FILE *
funopen(void *cookie, int (*readfn)(void *, char *, int),
.RS
.\" old man macros need the reset of bold mode
.ft B
int (*writefn)(void *, char *, int),
fpos_t (*seekfn)(void *, off_t, int), int (*closefn)(void *));
.RE
.\" old man macros need the reset of bold mode
.ft B

FILE *
fropen(void *cookie, int (*readfn)(void *, char *, int));

FILE *
fwopen(void *cookie, int (*writefn)(void *, char *, int));
.ft R
.fi
.SH DESCRIPTION
.I Funopen
associates a stream with up to four ``I/O functions''.
Either 
.I readfn
or
.I writefn
must be specified;
the others can be given as an appropriately-typed NULL pointer.
These I/O functions will be used to read, write, seek and
close the new stream.
.PP
In general, omitting a function means that any attempt to perform the
associated operation on the resulting stream will fail.
If the close function is omitted, closing the stream will flush 
any buffered output and then succeed.
.PP
The calling conventions of
.IR readfn ,
.IR writefn ,
.I seekfn 
and
.I closefn
must match those, respectively, of
.IR read (2),
.IR write (2),
.IR seek (2),
and
.IR close (2)
with the single exception that they are passed the
.I cookie
argument specified to 
.I funopen
in place of the traditional file descriptor argument.
.PP
Read and write I/O functions are allowed to change the underlying buffer
on fully buffered or line buffered streams by calling
.IR setvbuf .
They are also not required to completely fill or empty the buffer.
They are not, however, allowed to change streams from unbuffered to buffered
or to change the state of the line buffering flag.
They must also be prepared to have read or write calls occur on buffers other
than the one most recently specified.
.PP
All user I/O functions can report an error by returning \-1.
Additionally, all of the functions should set the external variable
.I errno
appropriately if an error occurs.
.PP
An error on 
.I closefn
does not keep the stream open.
.PP
As a convenience, the include file ``<stdio.h>'' defines the macros
.I fropen
and
.I fwopen
as calls to
.I funopen
with only a read or write function specified.
.SH "SEE ALSO"
fcntl(2), open(2), fclose(3), fopen(3), fseek(3), setbuf(3)
.SH "RETURN VALUES"
Upon successful completion, 
.I funopen
returns a FILE pointer.
Otherwise, NULL is returned and the global variable
.I errno
is set to indicate the error.
.SH ERRORS
.TP 15
[EINVAL]
.I Funopen
was called without either a read or write function.
.I Funopen
may also fail and set errno for any of the errors
specified for the routine
.IR malloc (3).
.SH BUGS
.I Funopen
may not be portable to systems other than BSD.
