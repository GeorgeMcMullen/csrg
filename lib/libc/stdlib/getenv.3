.\" Copyright (c) 1988 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)getenv.3	6.9 (Berkeley) 05/17/90
.\"
.TH GETENV 3 ""
.AT 3
.SH NAME
getenv, putenv, setenv, unsetenv \- manipulate environmental variables
.SH SYNOPSIS
.nf
.ft B
#include <stdlib.h>

char *
getenv(const char *name);

setenv(const char *name, const char *value, int overwrite);

putenv(const char *string);

void
unsetenv(const char *name);
.ft R
.fi
.SH DESCRIPTION
.I Getenv
searches the environment list (see
.IR environ (7))
for a string of the form \fIname\fP\fB=\fP\fIvalue\fP and returns
a pointer to the string
.I value
if such a string is present, and a NULL pointer if it is not.
.PP
.I Setenv
searches the environment list as
.I getenv
does; if the string
.I name
is not found, a string of the form \fIname\fP\fB=\fP\fIvalue\fP is
added to the environment.
If it is found, and
.I overwrite
is non-zero, its value is changed to
.IR value .
.I Setenv
returns 0 on success and -1 on failure, setting the external variable
.IR errno .
.PP
.I Putenv
takes an argument of the form ``\fIname\fR=\fIvalue\fR'' and is the
equivalent of:
.sp
.RS
setenv(name, value, 1);
.RE
.PP
.I Unsetenv
removes all occurrences of the string
.I name
from the environment.
There is no library provision for completely removing the current
environment.
It is suggested that the following code be used to do so.
.sp
.RS
.nf
static char	*envinit[1];
extern char	**environ;
environ = envinit;
.fi
.RE
.PP
All of these routines permit, but do not require, a trailing equals
(``='') sign on
.I name
or a leading equals sign on
.IR value .
.SH ERRORS
.TP
[ENOMEM]
.I Setenv
or
.I putenv
failed because they were unable to allocate memory for the environment.
.SH SEE ALSO
csh(1), sh(1), execve(2), environ(7)
.SH STANDARDS
.B Getenv
conforms to ANSI X3.159-1989 (``ANSI C'').
